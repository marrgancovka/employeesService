// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_employee is a generated GoMock package.
package mock_employee

import (
	context "context"
	models "employees/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockUsecase) CreateCompany(ctx context.Context, name string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, name)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockUsecaseMockRecorder) CreateCompany(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockUsecase)(nil).CreateCompany), ctx, name)
}

// CreateDepartment mocks base method.
func (m *MockUsecase) CreateDepartment(ctx context.Context, department *models.CreateDepartment) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", ctx, department)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockUsecaseMockRecorder) CreateDepartment(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockUsecase)(nil).CreateDepartment), ctx, department)
}

// CreateEmployee mocks base method.
func (m *MockUsecase) CreateEmployee(ctx context.Context, employee *models.CreateEmployee) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, employee)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockUsecaseMockRecorder) CreateEmployee(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockUsecase)(nil).CreateEmployee), ctx, employee)
}

// DeleteEmployee mocks base method.
func (m *MockUsecase) DeleteEmployee(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockUsecaseMockRecorder) DeleteEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockUsecase)(nil).DeleteEmployee), ctx, id)
}

// EditEmployee mocks base method.
func (m *MockUsecase) EditEmployee(ctx context.Context, employee *models.CreateEmployee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEmployee", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditEmployee indicates an expected call of EditEmployee.
func (mr *MockUsecaseMockRecorder) EditEmployee(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEmployee", reflect.TypeOf((*MockUsecase)(nil).EditEmployee), ctx, employee)
}

// GetListCompanyEmployees mocks base method.
func (m *MockUsecase) GetListCompanyEmployees(ctx context.Context, companyID int32) ([]*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCompanyEmployees", ctx, companyID)
	ret0, _ := ret[0].([]*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCompanyEmployees indicates an expected call of GetListCompanyEmployees.
func (mr *MockUsecaseMockRecorder) GetListCompanyEmployees(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCompanyEmployees", reflect.TypeOf((*MockUsecase)(nil).GetListCompanyEmployees), ctx, companyID)
}

// GetListDepartmentCompanyEmployees mocks base method.
func (m *MockUsecase) GetListDepartmentCompanyEmployees(ctx context.Context, departmentID int32) ([]*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDepartmentCompanyEmployees", ctx, departmentID)
	ret0, _ := ret[0].([]*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDepartmentCompanyEmployees indicates an expected call of GetListDepartmentCompanyEmployees.
func (mr *MockUsecaseMockRecorder) GetListDepartmentCompanyEmployees(ctx, departmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDepartmentCompanyEmployees", reflect.TypeOf((*MockUsecase)(nil).GetListDepartmentCompanyEmployees), ctx, departmentID)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockRepository) CreateCompany(ctx context.Context, name string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, name)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockRepositoryMockRecorder) CreateCompany(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockRepository)(nil).CreateCompany), ctx, name)
}

// CreateDepartment mocks base method.
func (m *MockRepository) CreateDepartment(ctx context.Context, department *models.Department) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", ctx, department)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockRepositoryMockRecorder) CreateDepartment(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockRepository)(nil).CreateDepartment), ctx, department)
}

// CreateEmployee mocks base method.
func (m *MockRepository) CreateEmployee(ctx context.Context, employee *models.Employee) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", ctx, employee)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockRepositoryMockRecorder) CreateEmployee(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockRepository)(nil).CreateEmployee), ctx, employee)
}

// DeleteEmployee mocks base method.
func (m *MockRepository) DeleteEmployee(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockRepositoryMockRecorder) DeleteEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockRepository)(nil).DeleteEmployee), ctx, id)
}

// EditEmployee mocks base method.
func (m *MockRepository) EditEmployee(ctx context.Context, employee *models.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEmployee", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditEmployee indicates an expected call of EditEmployee.
func (mr *MockRepositoryMockRecorder) EditEmployee(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEmployee", reflect.TypeOf((*MockRepository)(nil).EditEmployee), ctx, employee)
}

// GetEmployeeByID mocks base method.
func (m *MockRepository) GetEmployeeByID(ctx context.Context, id int32) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", ctx, id)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockRepositoryMockRecorder) GetEmployeeByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockRepository)(nil).GetEmployeeByID), ctx, id)
}

// GetListCompanyEmployees mocks base method.
func (m *MockRepository) GetListCompanyEmployees(ctx context.Context, companyID int32) ([]*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCompanyEmployees", ctx, companyID)
	ret0, _ := ret[0].([]*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCompanyEmployees indicates an expected call of GetListCompanyEmployees.
func (mr *MockRepositoryMockRecorder) GetListCompanyEmployees(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCompanyEmployees", reflect.TypeOf((*MockRepository)(nil).GetListCompanyEmployees), ctx, companyID)
}

// GetListDepartmentEmployees mocks base method.
func (m *MockRepository) GetListDepartmentEmployees(ctx context.Context, departmentID int32) ([]*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDepartmentEmployees", ctx, departmentID)
	ret0, _ := ret[0].([]*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDepartmentEmployees indicates an expected call of GetListDepartmentEmployees.
func (mr *MockRepositoryMockRecorder) GetListDepartmentEmployees(ctx, departmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDepartmentEmployees", reflect.TypeOf((*MockRepository)(nil).GetListDepartmentEmployees), ctx, departmentID)
}
