// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employee.sql

package gen

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name)
VALUES ($1) RETURNING id
`

func (q *Queries) CreateCompany(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, createCompany, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (name, phone, company_id)
VALUES ($1, $2, $3) ON CONFLICT (name, company_id) DO NOTHING
RETURNING id
`

type CreateDepartmentParams struct {
	Name      string
	Phone     string
	CompanyID int32
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (int32, error) {
	row := q.db.QueryRow(ctx, createDepartment, arg.Name, arg.Phone, arg.CompanyID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (name, surname, phone, company_id, department_id, passport_type, passport_number)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type CreateEmployeeParams struct {
	Name           string
	Surname        string
	Phone          string
	CompanyID      int32
	DepartmentID   int32
	PassportType   string
	PassportNumber string
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Surname,
		arg.Phone,
		arg.CompanyID,
		arg.DepartmentID,
		arg.PassportType,
		arg.PassportNumber,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE
FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT name, phone
FROM departments
WHERE id = $1
`

type GetDepartmentByIDRow struct {
	Name  string
	Phone string
}

func (q *Queries) GetDepartmentByID(ctx context.Context, id int32) (GetDepartmentByIDRow, error) {
	row := q.db.QueryRow(ctx, getDepartmentByID, id)
	var i GetDepartmentByIDRow
	err := row.Scan(&i.Name, &i.Phone)
	return i, err
}

const getDepartmentID = `-- name: GetDepartmentID :one
SELECT department_id
FROM employees
WHERE id = $1
`

func (q *Queries) GetDepartmentID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getDepartmentID, id)
	var department_id int32
	err := row.Scan(&department_id)
	return department_id, err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id,
       name,
       surname,
       phone,
       company_id,
       passport_type,
       passport_number,
       department_id
FROM employees
WHERE id = $1
`

type GetEmployeeByIDRow struct {
	ID             int32
	Name           string
	Surname        string
	Phone          string
	CompanyID      int32
	PassportType   string
	PassportNumber string
	DepartmentID   int32
}

func (q *Queries) GetEmployeeByID(ctx context.Context, id int32) (GetEmployeeByIDRow, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i GetEmployeeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Phone,
		&i.CompanyID,
		&i.PassportType,
		&i.PassportNumber,
		&i.DepartmentID,
	)
	return i, err
}

const getListCompanyDepartmentEmployee = `-- name: GetListCompanyDepartmentEmployee :many
SELECT e.id,
       e.name,
       e.surname,
       e.phone,
       e.company_id,
       e.passport_type,
       e.passport_number,
       d.name,
       d.phone
FROM employees e
         JOIN departments d ON e.department_id = d.id
WHERE e.department_id = $1
ORDER BY e.id asc
`

type GetListCompanyDepartmentEmployeeRow struct {
	ID             int32
	Name           string
	Surname        string
	Phone          string
	CompanyID      int32
	PassportType   string
	PassportNumber string
	Name_2         string
	Phone_2        string
}

func (q *Queries) GetListCompanyDepartmentEmployee(ctx context.Context, departmentID int32) ([]GetListCompanyDepartmentEmployeeRow, error) {
	rows, err := q.db.Query(ctx, getListCompanyDepartmentEmployee, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCompanyDepartmentEmployeeRow
	for rows.Next() {
		var i GetListCompanyDepartmentEmployeeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Phone,
			&i.CompanyID,
			&i.PassportType,
			&i.PassportNumber,
			&i.Name_2,
			&i.Phone_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListCompanyEmployee = `-- name: GetListCompanyEmployee :many
SELECT e.id,
       e.name,
       e.surname,
       e.phone,
       e.company_id,
       e.passport_type,
       e.passport_number,
       d.name,
       d.phone
FROM employees e
         JOIN departments d ON e.department_id = d.id
WHERE e.company_id = $1
ORDER BY e.id asc
`

type GetListCompanyEmployeeRow struct {
	ID             int32
	Name           string
	Surname        string
	Phone          string
	CompanyID      int32
	PassportType   string
	PassportNumber string
	Name_2         string
	Phone_2        string
}

func (q *Queries) GetListCompanyEmployee(ctx context.Context, companyID int32) ([]GetListCompanyEmployeeRow, error) {
	rows, err := q.db.Query(ctx, getListCompanyEmployee, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCompanyEmployeeRow
	for rows.Next() {
		var i GetListCompanyEmployeeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Phone,
			&i.CompanyID,
			&i.PassportType,
			&i.PassportNumber,
			&i.Name_2,
			&i.Phone_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET name=$2,
    surname=$3,
    phone=$4,
    company_id=$5,
    department_id=$6,
    passport_type=$7,
    passport_number=$8,
    updated_at=now()
WHERE id = $1
`

type UpdateEmployeeParams struct {
	ID             int32
	Name           string
	Surname        string
	Phone          string
	CompanyID      int32
	DepartmentID   int32
	PassportType   string
	PassportNumber string
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Phone,
		arg.CompanyID,
		arg.DepartmentID,
		arg.PassportType,
		arg.PassportNumber,
	)
	return err
}
